一. 前言
    1. webpack可以通过loader和plugin来满足大多数的前端场景,代价是复杂的配置,以及比较难的用法
二. 结构化理解 Webpack 配置项
    1. webpck的工作流程
        - 输入, 从文件系统读入代码文件
        - 模块递归处理: 调用loader处理文件,并且生成AST语法树,然后根据模块之间的依赖关系,递归的去处理这的问题
        - 后处理,模块处理完成之后,进行模块合并,注入运行时,优化产物
        - 输出,将产物写入文件系统
    2. webpack的配置分类
        - 流程类,处于打包过程的某个工具,直接影响打包的产物
        - 工具类,不属于打包的过程,不会影响打包的产物,但是可以提供一些额外的功能
    3. 打包流程相关的配置
        - 输入输出:
            - entry:项目的入口文件
            - context:项目的上下文路径,可以简化entry的路径
            - output:打包后的输出路径,常用的属性有path和filename
        - 模块处理
            - resolve:解析模块的路径,可以简化模块的路径,常用的属性有modules和extensions以及alias
            - module:在整理进行模块的处理,通常在这里进行loader的配置
            - externals:声明外部资源,webpack会忽略这部分,这部分的功能应该由环境来提供